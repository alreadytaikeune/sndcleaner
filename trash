for(int i = 0; i < len; i+=step){
		uint16_t data = 0;
		if(step==2){
			if(endianness==1){
				data = stream_buffer[i] | (stream_buffer[i+1] << 8);		
			}
			else if(endianness==0){
				data = stream_buffer[i+1] | (stream_buffer[i] << 8);
			}	
			else{
				std::cout << "Unsupported endianness" << std::endl;
				exit(EXIT_FAILURE);
			}
		}			
		else if(step == 4){
			uint16_t data1 = 0;
			uint16_t data2 = 0;
			if(endianness==1){
				data1 = stream_buffer[i] | (stream_buffer[i+1] << 8);
				data2 = stream_buffer[i+2] | (stream_buffer[i+3] << 8);
			}
			else if(endianness==0){
				data1 = stream_buffer[i+1] | (stream_buffer[i] << 8);
				data2 = stream_buffer[i+3] | (stream_buffer[i+2] << 8);
			}
			else{
				std::cout << "Unsupported endianness" << std::endl;
				exit(EXIT_FAILURE);
			}
			data = (data1+data2)/2;
		}
		data_buffer[data_buffer_idx] = data;
		data_buffer_idx++;
	}
